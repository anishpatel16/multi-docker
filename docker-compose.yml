version: '3'

#list of services when we use docker file as an application
services:
  postgres:
    image: 'postgres:latest' #whenever docker starts, it will create postgres service using image postgres
    #and use version tag as latest
  redis:
    image: 'redis:latest' 
  nginx:
    depends_on:
      - api
      - client
    restart: always #nginx should always should be working.
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx 
    ports:
      - '3050:80' #we access 3050 in local host and it will be accessing 80 in contianer.
  api:
    build:
      dockerfile: Dockerfile.dev
        #exact directory to build our image
      context: ./server #to look into directory to find Dockerfile which is inside server folder
        #everything relevant to us are in app folder
    volumes:
      - /app/node_modules #don't try to modify this folder and leave the way it is
      - ./server:/app #anytime we access something inside app directory,  except for node_modules
          #folder, its going to redirect to server directory of our project folder. 
          #anytime we make changes to our server files, it will be reflacted in app folder.
          #thats gonna make sure we dont build an image once we start a contianer.
    environment:
        - REDIS_HOST=redis
        - REDIS_PORT=6379
        - PGUSER=postgres
        - PGHOST=postgres
        - PGDATABASE=postgres
        - PGPASSWORD=postgres_password
        - PGPORT=5432

  client: 
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
        - /app/node_modules #make sure node_modules wont get overrident
        - ./client:/app #everything in client dir should be shared with app folder
  worker: 
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
        - /app/node_modules #make sure node_modules wont get overrident
        - ./worker:/app #everything in client dir should be mapped  with app folder

    
      

      